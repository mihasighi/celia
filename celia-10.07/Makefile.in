##########################################################################
#                                                                        #
#  The CINV tool for dynamic programs verification                       #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU General Public                   #
#  License version 2, as published by the Free Software Foundation.      #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
#  See the GNU General Public License version 2 for more details         #
#  (enclosed in the file GPL).                                           #
#                                                                        #
##########################################################################

#
# sample Makefile for Objective Caml
# Copyright (C) 2007 Mihaela SIGHIREANU
#   from a first script by Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

ifeq ($(VERBOSEMAKE),yes)
 QUIET = 
else    
 QUIET = yes
endif

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@
LIBDIR=@libdir@

EXE=@EXE@

# where to install the man page
MANDIR=@mandir@

# other variables
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@

APRONDIR = @APRONDIR@
IPDIR    = @IPDIR@

INCLUDES = \
-I . \
-I src \
-I shapes \
-I $(APRONDIR)/lib \
-I $(IPDIR)/lib \
-I $(IPDIR)/interproc

BFLAGS   = -g -dtypes $(INCLUDES)
OFLAGS   = -dtypes $(INCLUDES)

LDFLAGS  = \
-L/usr/lib \
-L/usr/local/lib/ocaml \
-Lshapes \
-L$(APRONDIR)/lib \
-L$(IPDIR)/lib \
-L$(IPDIR)/interproc

LDLIBS   = \
-loct_caml -loctD \
-lbox_caml -lboxD \
-lapron_caml -lapron_debug \
-lgmp_caml -lmpfr -lgmp \
-lunix -lbigarray -lcamlidl

LDLIBS_SHP = \
-lshape_caml -lshape

LIBS_SR = lsumprd
LIBS_SP = lsumrel
LIBS_UOP11 = uconsoctp11
LIBS_UPP11 = uconspolyp11
LIBS_UOP12 = uconsoctp12
LIBS_UPP12 = uconspolyp12
LIBS_UOP21 = uconsoctp21
LIBS_UPP21 = uconspolyp21

GENERATED = src/cinv_version.ml shapes/shape_version.ml 

# main targets
##############

CINVTOOL = cinv
CINV_MP = $(CINVTOOL)-$(LIBS_MP)
CINV_MR = $(CINVTOOL)-$(LIBS_MR)
CINV_SR = $(CINVTOOL)-$(LIBS_SR)
CINV_SP = $(CINVTOOL)-$(LIBS_SP)
CINV_UOP11 = $(CINVTOOL)-$(LIBS_UOP11)
CINV_UPP11 = $(CINVTOOL)-$(LIBS_UPP11)
CINV_UOP12 = $(CINVTOOL)-$(LIBS_UOP12)
CINV_UPP12 = $(CINVTOOL)-$(LIBS_UPP12)
CINV_UOP21 = $(CINVTOOL)-$(LIBS_UOP21)
CINV_UPP21 = $(CINVTOOL)-$(LIBS_UPP21)

BINARY  = bin/$(CINV_MR).$(OCAMLBEST) bin/$(CINV_MP).$(OCAMLBEST) \
	bin/$(CINV_SP).$(OCAMLBEST) bin/$(CINV_SR).$(OCAMLBEST) \
	bin/$(CINV_UOP11).$(OCAMLBEST) bin/$(CINV_UPP11).$(OCAMLBEST) \
	bin/$(CINV_UOP12).$(OCAMLBEST) bin/$(CINV_UPP12).$(OCAMLBEST) \
	bin/$(CINV_UOP21).$(OCAMLBEST) bin/$(CINV_UPP21).$(OCAMLBEST)
LIBRARY = \
lib/libshape.a

all: $(BINARY) check 

opt: bin/$(CINV_SP).opt bin/$(CINV_SR).opt bin/$(CINV_UOP11).opt bin/$(CINV_UPP11).opt \
bin/$(CINV_UOP12).opt bin/$(CINV_UPP12).opt bin/$(CINV_UOP21).opt bin/$(CINV_UPP21).opt

byte : bin/$(CINV_SP).byte bin/$(CINV_SR).byte bin/$(CINV_UOP11).byte bin/$(CINV_UPP11).byte \
	bin/$(CINV_UOP12).byte bin/$(CINV_UPP12).byte bin/$(CINV_UOP21).byte bin/$(CINV_UPP21).byte

.PHONY: check

# sanity check: the prelude files do typecheck
check: $(BINARY) 


# OCAML
OCAMLCMA = unix.cma str.cma nums.cma bigarray.cma camllib.cma
OCAMLCMXA = $(OCAMLCMA:.cma=.cmxa)

# APRON
APRON_CMA = gmp.cma apron.cma box.cma oct.cma polka.cma ppl.cma polkaGrid.cma
APRON_CMXA = $(APRON_CMA:.cma=.cmxa)

# INTERPROC
IP_CMA = fixpoint.cma
IP_CMXA = $(IP_CMA:.cma=.cmxa)
IP_CMO = \
$(IPDIR)/interproc/spl_syn.cmo \
$(IPDIR)/interproc/spl_lex.cmo \
$(IPDIR)/interproc/spl_yacc.cmo \
$(IPDIR)/interproc/pSpl_syn.cmo \
$(IPDIR)/interproc/boolexpr.cmo \
$(IPDIR)/interproc/equation.cmo \
$(IPDIR)/interproc/syn2equation.cmo \
$(IPDIR)/interproc/solving.cmo \
$(IPDIR)/interproc/option.cmo \
$(IPDIR)/interproc/frontend.cmo
IP_CMX = $(IP_CMO:.cmo=.cmx)

# 
# CINV
CINV_CMO = src/cinv_version.cmo src/cinv_options.cmo \
	   src/cinv.cmo
CINV_CMX = $(CINV_CMO:.cmo=.cmx)

bin/$(CINVTOOL)-%.opt: $(IP_CMX) $(CINV_CMX) src/$(CINVTOOL).cmx 
	$(if $(QUIET),@echo 'Linking  $@' &&) $(OCAMLOPT) $(OFLAGS) -o $@ $(OCAMLCMXA) $(APRON_CMXA) $(IP_CMXA) -ccopt "$(LDFLAGS)" -cclib "$(LDLIBS_SHP)$* -l$* $(LDLIBS)" $^

bin/$(CINVTOOL)-%.byte: $(IP_CMO) $(CINV_CMO) src/$(CINVTOOL).cmo
	$(if $(QUIET),@echo 'Linking  $@' &&) $(OCAMLC) $(BFLAGS) -o $@ $(OCAMLCMA) $(APRON_CMA) $(IP_CMA) -ccopt "$(LDFLAGS)" -cclib "$(LDLIBS_SHP)$* -l$* $(LDLIBS)" $^

bin/$(CINVTOOL)-%.static: $(IP_CMX) $(CINV_CMX) src/$(CINVTOOL).cmx
	$(if $(QUIET),@echo 'Linking  $@' &&) $(OCAMLOPT) -cclib -static $(OFLAGS) -o $@ $(OCAMLCMXA) $(APRON_CMXA) $(IP_CMXA) -ccopt "$(LDFLAGS)" -cclib "$(LDLIBS_SHP)$* -l$* $(LDLIBS)" $^
	strip $@



include Version

shapes/shape_version.ml: Version Makefile
	echo "let version = \""$(VERSION)"\"" >> $@
	echo "let date = \""`date`"\"" >> $@
	echo "let libdir = \""$(LIBDIR)/$(LIBRARY)"\"" >> $@

src/cinv_version.ml: Version Makefile
	echo "let version = \""$(VERSION)"\"" >> $@
	echo "let date = \""`date`"\"" >> $@
	echo "let libdir = \""$(LIBDIR)/$(CINVTOOL)"\"" >> $@

doc:: doc/version.tex
# TODO	cd doc; make

# tests

.PHONY: tests

tests:: $(BINARY)
# TODO	cd tests; sh ./tests "../$(BINARY)"
# TODO	make -C examples yices

examples:: $(BINARY)
# TODO	make -C examples

# debugging


# installation
##############

install: install-binary install-lib install-man

install-binary: $(BINARY)
	mkdir -p $(BINDIR)
	cp -f $(BINARY) $(BINDIR)/$(CINVTOOL)$(EXE)

install-lib: 
	cp -f shapes/(LIBRARY) $(LIBDIR)/

install-man:
	mkdir -p $(MANDIR)/man1
	cp -f doc/*.1 $(MANDIR)/man1

local-install: $(BINARY) 
	cp $(BINARY) $$HOME/bin/$(CPNTOOL)

# doc

doc/manual.ps: doc/manual.tex doc/version.tex
	make -C doc manual.ps

doc/version.tex: Version Makefile.in
	echo '\\newcommand{\\cinvversion}'"{$(VERSION)}" > $@

doc/manual.html: doc/manual.tex doc/version.tex
	make -C doc manual.html

# special rules
###############

# CAMLP4=@CAMLP4O@ pa_extend.cmo pa_macro.cmo

# src/%.cmo: src/%.ml4
# 	$(OCAMLC) -c $(BFLAGS) -pp "$(CAMLP4) -DOCAML@OCAMLV@ -impl" -impl $<

# src/%.cmx: src/%.ml4
# 	$(OCAMLOPT) -c $(OFLAGS) -pp "$(CAMLP4) -DOCAML@OCAMLV@ -impl" -impl $<

# src/%.ml: src/%.ml4
# 	$(CAMLP4) pr_o.cmo -DOCAML@OCAMLV@ -impl $< > $@

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .v .vo .ml4

.mli.cmi:
	$(if $(QUIET),@echo 'Ocamlc   $<' &&) $(OCAMLC) $(BFLAGS) -c $<

.ml.cmo:
	$(if $(QUIET),@echo 'Ocamlc   $<' &&) $(OCAMLC) $(BFLAGS) -c $<

.ml.o:
	$(OCAMLOPT) $(OFLAGS) -c $<

.ml.cmx:
	$(if $(QUIET),@echo 'Ocamlopt $<' &&) $(OCAMLOPT) $(OFLAGS) -c $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

.ml4.ml:
	$(CAMLP4) -impl $< > $@

otags:
	otags cpn/*.mli cpn/*.ml c/*.mli c/*.ml intf/*.mli intf/*.ml

wc:
	ocamlwc -p cpn/*.ml* jc/*.ml* c/*.ml* intf/*.ml* tools/*.ml*

# distrib
#########

NAME=$(CPNTOOL)-$(VERSION)
EXPORT=export/$(NAME)

FTP = $(HOME)/ftp/$(CPNTOOL)
WWW = $(HOME)/WWW/$(CPNTOOL)

FILES =src/*.ml* shapes/* \
       Version Makefile.in configure.in configure .depend \
       README INSTALL COPYING GPL CHANGES \
       doc/Makefile doc/manual.ps doc/$(CPNTOOL).1 \
       samples/Makefile* 

distrib export: source export-doc export-examples linux
	make -C $(HOME)/www/cinv install

source: doc/manual.ps export/$(NAME).tar.gz
	cp CHANGES export/$(NAME).tar.gz $(FTP)
	echo "<#def version>$(VERSION)</#def>" > $(HOME)/www/$(CPNTOOL)/version.prehtml
	echo "<#def cversion>$(CVERSION)</#def>" >> $(HOME)/www/$(CPNTOOL)/version.prehtml
	echo "<#def jcversion>$(JCVERSION)</#def>" >> $(HOME)/www/$(CPNTOOL)/version.prehtml

export/$(NAME).tar.gz:
	mkdir -p $(EXPORT)/bin
	cp --parents $(FILES) $(EXPORT)
	if test -d ocamlgraph; then \
	  cp --parents $(OCAMLGRAPHFILES) $(EXPORT); \
	fi
	cd $(EXPORT); rm -f $(GENERATED)
	cd export; tar cf $(NAME).tar $(NAME); gzip -f --best $(NAME).tar

tarball: 
	cd export; rm -rf $(NAME) $(NAME).tar.gz
	make export/$(NAME).tar.gz

EXFILES = examples/*/*.v examples/*/*.why

export-examples:
	cp --parents $(EXFILES) $(WWW)
	make -C $(WWW)/examples clean depend
	echo "*** faire make all dans $(WWW)/examples ***"

export-doc: doc/manual.ps doc/manual.html
	cp doc/manual.ps doc/manual.html $(WWW)/manual
	cp doc/logic_syntax.bnf $(WWW)/manual
	(cd $(WWW)/manual; hacha manual.html)

BINARYNAME = $(NAME)-$(OSTYPE)

linux: binary

BINARYFILES = $(FILES) bin/$(CPNTOOL).opt bin/$(CPNTOOL).static
# README INSTALL COPYING GPL \
# 	bin/$(CPNTOOL).static doc/$(CPNTOOL).1 doc/manual.ps \
# 	lib/$(CPNTOOL)/*.why

binary: $(BINARYFILES)
	mkdir -p export/$(BINARYNAME)
	cp --parents $(BINARYFILES) export/$(BINARYNAME)
	(cd export; tar czf $(BINARYNAME).tar.gz $(BINARYNAME))
	cp export/$(BINARYNAME).tar.gz $(FTP)

# file headers
##############
headers:
	headache -c doc/headache_config.txt -h doc/header.txt \
		Makefile.in configure.in README \
		*/*.ml */*.ml[ily4]

# myself
########

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean and depend
##################

clean::
	rm -f src/*.cm[iox] src/*.o src/*~ src/*.annot
	rm -f src/*.cp src/*.fn src/*.ky src/*.log src/*.pg src/*.toc src/*.tp src/*.vr src/*.aux
	rm -f */f_*.shp
	rm -f bin/$(CPNTOOL).opt bin/$(CPNTOOL).byte bin/$(CPNTOOL).static bin/top
	rm -f $(GENERATED)
	make -C shapes clean
	make -C samples clean
	make -C doc clean

dist-clean:: clean
	rm -f Makefile config.status config.cache config.log

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) -slash $(INCLUDES) src/*.ml src/*.mli > .depend

alldepend:
	make -C examples depend

include .depend
