##########################################################################
#                                                                        #
#  The CINV tool for dynamic programs verification                       #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU General Public                   #
#  License version 2, as published by the Free Software Foundation.      #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
#  See the GNU General Public License version 2 for more details         #
#  (enclosed in the file GPL).                                           #
#                                                                        #
##########################################################################


#
# Process this file with autoconf to produce a configure script.
#

# autoconf input for OCaml programs
# Copyright (C) 2009 Mihaela Sighireanu
#   from a script by Jean-Christophe Filli√¢tre
#   modifying a first script by Georges Mariano 
# 
# The script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found, 
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex"
#   OCAMLYACC     "ocamlyac"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWEB      "ocamlweb" (not mandatory)

# Set the general information about the package

AC_PREREQ(2.61)
AC_INIT("Cinv",0.1,verif@liafa.jussieu.fr)


# Checks for one particular file of the sources 

AC_CONFIG_SRCDIR([shapes/shape_representation.c])
AC_CONFIG_HEADER([config.h])

# libtool
AC_PROG_LIBTOOL

# Set the verbosemake feature

AC_ARG_ENABLE(verbosemake,[  --enable-verbosemake    verbose makefile commands],VERBOSEMAKE=yes,VERBOSEMAKE=no)
if test "$VERBOSEMAKE" = yes ; then
        AC_MSG_RESULT(Make will be verbose.)
fi


# Checks for arch/OS

AC_MSG_CHECKING(executable suffix)
if uname -s | grep -q CYGWIN ; then
  EXE=.exe
  AC_MSG_RESULT(.exe)
else
  EXE=
  AC_MSG_RESULT(<none>)
fi


#
# Checks for programs.
#

# Checks for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
        AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $OCAMLVERSION"
OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d " "`
echo "ocaml library path is $OCAMLLIB"

case $OCAMLVERSION in
  0.*|1.*|2.00|3.00*|3.01*|3.02*|3.03*|3.04*|3.05*|3.06*|3.07*)
        AC_MSG_ERROR(You need Objective 3.08 or later);;
  3.08.2)
        FORPACK=""
        OCAMLV=3082;;
  3.08*)
        FORPACK=""
        OCAMLV=308;;
  *)
        FORPACK="-for-pack Graph";;
esac

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
        AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
        AC_MSG_CHECKING(ocamlopt version)
        TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != "$OCAMLVERSION" ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
            OCAMLOPT=no
        else
            AC_MSG_RESULT(ok)
            OCAMLBEST=opt
        fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
        AC_MSG_ERROR(Cannot find ocamldep.)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
        AC_MSG_ERROR(Cannot find ocamllex.)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
        OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
        AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

# Checks for Apron
# since no localization is given in apron, make a hard set of directories
APRONDIR="interproc-dist"
APRONLIB="$APRONDIR/lib"
AC_CHECK_PROG(APRONC,aprontop,aprontop,no,path="$PATH:$APRONDIR/bin")
if test "$APRONC" = no ; then
    APRON=no
    AC_MSG_WARN(Cannot find apron.)
else
    APRON=yes
fi

# Checks for INTERPROC
# since no localization is given in interproc, make a hard set of directories
IPDIR="interproc-dist"
IPLIB="$IPDIR/lib"
AC_CHECK_PROG(IPC,interproc.opt,interproc.opt,no,path="$PATH:$IPDIR/bin")
if test "$IPC" = no; then
    IP=no
    AC_MSG_WARN(Cannot find Interproc.)
else
    IP=yes
fi


# Checks for libraries.
# FIXME: Replace `main' with a function in `-lapron':
#AC_CHECK_LIB([apron], [main])
# FIXME: Replace `main' with a function in `-lapron_caml':
#AC_CHECK_LIB([apron_caml], [main])
# FIXME: Replace `main' with a function in `-lapron_debug':
#AC_CHECK_LIB([apron_debug], [main])
# FIXME: Replace `main' with a function in `-lbigarray':
#AC_CHECK_LIB([bigarray], [main])
# FIXME: Replace `main' with a function in `-lgmp':
#AC_CHECK_LIB([gmp], [main])
# FIXME: Replace `main' with a function in `-lgmp_caml':
#AC_CHECK_LIB([gmp_caml], [main])
# FIXME: Replace `main' with a function in `-lm':
#AC_CHECK_LIB([m], [main])
# FIXME: Replace `main' with a function in `-lmpfr':
#AC_CHECK_LIB([mpfr], [main])
# FIXME: Replace `main' with a function in `-lpolkaMPQ_debug':
#AC_CHECK_LIB([polkaMPQ_debug], [main])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_REALLOC


# substitutions to perform
AC_SUBST(VERBOSEMAKE)
AC_SUBST(EXE)

AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLV)
AC_SUBST(OCAMLLIB)

AC_SUBST(APRON)
AC_SUBST(APRONDIR)
AC_SUBST(APRONLIB)

AC_SUBST(IP)
AC_SUBST(IPDIR)
AC_SUBST(IPLIB)

# Finally create the Makefile from Makefile.in
AC_OUTPUT(Makefile)
chmod a-w Makefile

# Summary

echo
echo "                 Summary"
echo "-----------------------------------------"
echo "OCaml version           : $OCAMLVERSION"
echo "OCaml library path      : $OCAMLLIB"
echo "Verbose make            : $VERBOSEMAKE"
echo "Apron                   : $APRON"
if test "$APRON" = "yes" ; then
   echo "    Lib                 : $APRONLIB"
   echo "    Src                 : $APRONDIR"
fi
echo "Interproc               : $IP"
if test "$IP" = "yes" ; then
   echo "    Lib                 : $IPLIB"
   echo "    Src                 : $IPDIR"
fi

