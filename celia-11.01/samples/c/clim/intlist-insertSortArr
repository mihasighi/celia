
tag char_P = {
  integer char_M: 8;
}

tag void_P = {
}

char_P[0..36] __string_List_after_calling_insertion_sort___;

tag __fc_pos_t = {
  integer __fc_stdio_position: 32;
}

tag __fc_FILE = {
  __fc_pos_t[0] __fc_stdio_fpos: 32; 
  char_P[..] __fc_stdio_buffer: 32; 
  integer __fc_stdio_error: 8; 
  integer __fc_stdio_eof: 8; 
  integer __fc_stdio_id: 32;
}

tag intlist_ = {
  integer data: 32; 
  intlist_[..] next: 32;
}

__fc_FILE[..] __fc_stdout;

integer printf(char_P[..] format)
behavior default:
  assigns __fc_stdout.__fc_stdio_fpos.__fc_stdio_position,
  __fc_stdout.__fc_stdio_buffer,
  __fc_stdout.__fc_stdio_error,
  __fc_stdout.__fc_stdio_eof,
  __fc_stdout.__fc_stdio_id;
  ensures (C_1 : true);
;

intlist_[..] allocate(intlist_[..] head_0, integer elements)
  requires (C_2 : ((C_3 : acyclic{Here}(head_0)) && (C_4 : (elements >= 1))));
behavior default:
  assigns head_0.data,
  head_0.next;
  ensures (C_5 : true);
;

unit printlist(intlist_[..] head)
  requires (C_6 : acyclic{Here}(head));
behavior default:
  assigns head.data,
  head.next;
  ensures (C_7 : true);
;

unit insertSortArr(intlist_[..] x)
  requires (C_30 : acyclic{Here}(x));
behavior default:
  ensures (C_31 : true);
{  
   (var intlist_[..] xi);
   
   (var intlist_[..] y);
   
   (var integer m);
   
   (var integer n);
   
   {  
      {  (C_8 : (y = null));
         (C_9 : (xi = y))
      };
      (C_11 : (xi = (C_10 : (x :> intlist_[..]))));
      
      loop 
      while (true)
      {  
         {  (if (xi != null) then () else 
            (break File "intlist-insertSortArr.c", line 13, characters 2-7));
            (C_12 : (y = x));
            
            loop 
            while (true)
            {  
               {  (if (y != xi) then (if ((C_14 : (y :> integer)) <=
                                           (C_13 : (xi :> integer))) then () else 
                                     (break File "intlist-insertSortArr.c", line 16, characters 6-11)) else 
                  (break File "intlist-insertSortArr.c", line 16, characters 6-11));
                  (C_16 : (y = (C_15 : (y :> intlist_[..]))))
               }
            };
            (C_18 : (m = (C_17 : (xi :> integer))));
            
            loop 
            while (true)
            {  
               {  (if (y != xi) then () else 
                  (break File "intlist-insertSortArr.c", line 21, characters 6-11));
                  (C_20 : (n = (C_19 : (y :> integer))));
                  (C_22 : ((C_21 : (y :> integer)) = m));
                  (C_23 : (m = n));
                  (C_25 : (y = (C_24 : (y :> intlist_[..]))))
               }
            };
            (C_27 : ((C_26 : (xi :> integer)) = m));
            (C_29 : (xi = (C_28 : (xi :> intlist_[..]))))
         }
      };
      
      (return ())
   }
}

unit main()
behavior default:
  ensures (C_38 : true);
{  
   (var intlist_[..] head_1);
   
   {  (C_32 : (head_1 = null));
      (C_34 : (head_1 = (C_33 : allocate(head_1, 10))));
      (C_35 : insertSortArr(head_1));
      (C_36 : printf());
      (C_37 : printlist(head_1));
      
      (return ())
   }
}
