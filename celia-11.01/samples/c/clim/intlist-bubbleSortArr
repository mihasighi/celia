
tag char_P = {
  integer char_M: 8;
}

tag void_P = {
}

char_P[0..25] __string_Output_after_bubblesort__;

tag __fc_pos_t = {
  integer __fc_stdio_position: 32;
}

tag __fc_FILE = {
  __fc_pos_t[0] __fc_stdio_fpos: 32; 
  char_P[..] __fc_stdio_buffer: 32; 
  integer __fc_stdio_error: 8; 
  integer __fc_stdio_eof: 8; 
  integer __fc_stdio_id: 32;
}

tag intlist_ = {
  integer data: 32; 
  intlist_[..] next: 32;
}

__fc_FILE[..] __fc_stdout;

integer printf(char_P[..] format)
behavior default:
  assigns __fc_stdout.__fc_stdio_fpos.__fc_stdio_position,
  __fc_stdout.__fc_stdio_buffer,
  __fc_stdout.__fc_stdio_error,
  __fc_stdout.__fc_stdio_eof,
  __fc_stdout.__fc_stdio_id;
  ensures (C_1 : true);
;

intlist_[..] allocate(intlist_[..] head_0, integer elements)
  requires (C_2 : ((C_3 : acyclic{Here}(head_0)) && (C_4 : (elements >= 1))));
behavior default:
  assigns head_0.data,
  head_0.next;
  ensures (C_5 : true);
;

unit printlist(intlist_[..] head)
  requires (C_6 : acyclic{Here}(head));
behavior default:
  assigns head.data,
  head.next;
  ensures (C_7 : true);
;

unit bubbleSortArr(intlist_[..] x)
  requires (C_27 : acyclic{Here}(x));
behavior default:
  ensures (C_28 : true);
{  
   (var intlist_[..] xi);
   
   (var intlist_[..] xin);
   
   (var integer v);
   
   (var integer k);
   
   {  (C_8 : (k = 1));
      
      loop 
      while (true)
      {  
         {  (if (k == 1) then () else 
            (break File "intlist-bubbleSortArr.c", line 10, characters 2-7));
            (C_9 : (k = 0));
            (C_10 : (xi = x));
            (C_12 : (xin = (C_11 : (x :> intlist_[..]))));
            
            loop 
            while (true)
            {  
               {  (if (xi != null) then (if (xin != null) then () else 
                                        (break File "intlist-bubbleSortArr.c", line 15, characters 6-11)) else 
                  (break File "intlist-bubbleSortArr.c", line 15, characters 6-11));
                  (if ((C_23 : (xi :> integer)) >=
                        (C_22 : ((C_21 : (xin :> integer)) + 1))) then 
                  {  (C_14 : (v = (C_13 : (xi :> integer))));
                     (C_17 : ((C_16 : (xi :> integer)) = (C_15 : (xin :> integer))));
                     (C_19 : ((C_18 : (xin :> integer)) = v));
                     (C_20 : (k = 1))
                  } else ());
                  (C_24 : (xi = xin));
                  (C_26 : (xin = (C_25 : (xin :> intlist_[..]))))
               }
            }
         }
      };
      
      (return ())
   }
}

unit main()
behavior default:
  ensures (C_35 : true);
{  
   (var intlist_[..] head_1);
   
   {  (C_29 : (head_1 = null));
      (C_31 : (head_1 = (C_30 : allocate(head_1, 10))));
      (C_32 : bubbleSortArr(head_1));
      (C_33 : printf());
      (C_34 : printlist(head_1));
      
      (return ())
   }
}
