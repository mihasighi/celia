
tag struct_intlist__xP = {
  intlist_[..] struct_intlist__xM: 32;
}

tag char_P = {
  integer char_M: 8;
}

tag void_P = {
}

char_P[0..44] __string_Output_after_splitting_the_list_on_value_3__;

char_P[0..45] __string_Output_after_splitting_the_list_on_value_3___;

tag __fc_pos_t = {
  integer __fc_stdio_position: 32;
}

tag __fc_FILE = {
  __fc_pos_t[0] __fc_stdio_fpos: 32; 
  char_P[..] __fc_stdio_buffer: 32; 
  integer __fc_stdio_error: 8; 
  integer __fc_stdio_eof: 8; 
  integer __fc_stdio_id: 32;
}

tag intlist_ = {
  integer data: 32; 
  intlist_[..] next: 32;
}

__fc_FILE[..] __fc_stdout;

integer printf(char_P[..] format)
behavior default:
  assigns __fc_stdout.__fc_stdio_fpos.__fc_stdio_position,
  __fc_stdout.__fc_stdio_buffer,
  __fc_stdout.__fc_stdio_error,
  __fc_stdout.__fc_stdio_eof,
  __fc_stdout.__fc_stdio_id;
  ensures (C_1 : true);
;

intlist_[..] allocate(intlist_[..] head_0, integer elements)
  requires (C_2 : ((C_3 : acyclic{Here}(head_0)) && (C_4 : (elements >= 1))));
behavior default:
  assigns head_0.data,
  head_0.next;
  ensures (C_5 : true);
;

unit printlist(intlist_[..] head)
  requires (C_6 : acyclic{Here}(head));
behavior default:
  assigns head.data,
  head.next;
  ensures (C_7 : true);
;

unit dispatch(intlist_[..] x, struct_intlist__xP[..] xgtv,
              struct_intlist__xP[..] xlev, integer v)
  requires (C_27 : acyclic{Here}(x));
behavior default:
  ensures (C_28 : true);
{  
   (var intlist_[..] xi);
   
   (var intlist_[..] y);
   
   {  (C_8 : (xi = x));
      (C_10 : ((C_9 : (xgtv :> intlist_[..])) = null));
      (C_12 : ((C_11 : (xlev :> intlist_[..])) = null));
      
      loop 
      while (true)
      {  
         {  (if (xi != null) then () else 
            (break File "intlist-dispatch.c", line 12, characters 2-7));
            (C_13 : (y = xi));
            (C_15 : (xi = (C_14 : (xi :> intlist_[..]))));
            (if ((C_26 : (y :> integer)) <= v) then 
            {  (C_23 : ((C_22 : (y :> intlist_[..])) = (C_21 : (xlev :> intlist_[..]))));
               (C_25 : ((C_24 : (xlev :> intlist_[..])) = y))
            } else 
            {  (C_18 : ((C_17 : (y :> intlist_[..])) = (C_16 : (xgtv :> intlist_[..]))));
               (C_20 : ((C_19 : (xgtv :> intlist_[..])) = y))
            })
         }
      };
      
      (return ())
   }
}

unit main()
behavior default:
  ensures (C_52 : true);
{  
   (var intlist_[..] head_1);
   
   (var struct_intlist__xP[0] head1);
   
   (var struct_intlist__xP[0] head2);
   
   {  (C_30 : (head1 = (C_29 : (new struct_intlist__xP[1]))));
      (C_32 : (head2 = (C_31 : (new struct_intlist__xP[1]))));
      
      {  (C_34 : ((C_33 : (head2 :> intlist_[..])) = null));
         (C_37 : ((C_36 : (head1 :> intlist_[..])) = (C_35 : (head2 :> intlist_[..]))));
         (C_39 : (head_1 = (C_38 : (head1 :> intlist_[..]))))
      };
      (C_41 : (head_1 = (C_40 : allocate(head_1, 10))));
      (C_42 : printlist(head_1));
      (C_43 : dispatch(head_1, head1, head2, 3));
      (C_44 : printf());
      (C_46 : printlist((C_45 : (head1 :> intlist_[..]))));
      (C_47 : printf());
      (C_49 : printlist((C_48 : (head2 :> intlist_[..]))));
      
      {  (C_50 : (free(head1)));
         (C_51 : (free(head2)));
         
         (return ())
      }
   }
}
