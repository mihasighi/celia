# Makefile
#
# APRON Library / Shape Domain
#
# Copyright (C) LIAFA 2009

# This file is part of the APRON Library, released under LGPL license.
# Please read the COPYING file packaged in the distribution.

include ../Makefile.config

PREFIX = ../..

# C include and lib directories
INCDIR = $(PREFIX)/include
LIBDIR = $(PREFIX)/lib
BINDIR = $(PREFIX)/bin

SRCDIR = $(shell pwd)

#---------------------------------------
# Programs
#---------------------------------------

# Library creation
SHARED = $(CC) -shared

#---------------------------------------
# Flags
#---------------------------------------

# Use ICFLAGS to specify machine-independent compilation flags.
ICFLAGS = \
-I$(MPFR_PREFIX)/include \
-I$(GMP_PREFIX)/include \
-I$(CAML_PREFIX)/lib/ocaml \
-I$(CAMLIDL_PREFIX)/lib/ocaml \
-I$(MLGMPIDL_PREFIX)/include \
-I$(APRON_PREFIX)/include \
-I$(APRON_PREFIX)/lib

# Caml
OCAMLINC = \
-I $(MLGMPIDL_PREFIX)/include \
-I $(APRON_PREFIX)/include \
-I $(APRON_PREFIX)/lib 

# lsum
LSUM_OPT = rel
#LSUM_OPT = prd

# mset
MSET_OPT = rel

# ucons
UCONS_OPT = dyn

#---------------------------------------
# Files
#---------------------------------------

HGRAPH_CCSOURCES = ap_pcons0.c ap_passign0.c apron2shape.c \
	    hgraph_print.c hgraph_transfer.c hgraph_closure.c hgraph_nary.c \
	    hgraph_representation.c hgraph_predicate.c hgraph_resize.c 

ADOM_SOURCES = adom_print.c adom_transfer.c adom_closure.c adom_nary.c \
	    adom_representation.c adom_predicate.c adom_resize.c

LSUM_CCSOURCES = $(subst adom,lsum,$(ADOM_SOURCES))

MSET_CCSOURCES = $(subst adom,mset,$(ADOM_SOURCES))

UCONS_CCSOURCES = $(subst adom,ucons,$(ADOM_SOURCES)) \
		ucons_internal_resize.c ucons_resize_succ_P12.c assertions.c
	    
USHAPE_CCSOURCES = $(HGRAPH_CCSOURCES) \
		$(subst adom,ushape,$(ADOM_SOURCES))
	    
CCSOURCES = $(USHAPE_CCSOURCES) \
		$(subst adom,shape,$(ADOM_SOURCES))

CCINC = hgraph.h hgraph_internal.h hgraph_fun.h \
	lsum.h lsum_internal.h lsum_fun.h \
	mset.h mset_internal.h mset_fun.h \
	ucons.h ucons_internal.h ucons_fun.h \
	ushape.h ushape_internal.h ushape_fun.h \
	shape.h shape_internal.h shape_fun.h \
	shape_manager.h shape_options.h apron2shape.h ap_pcons0.h ap_passign0.h


# trigers a whole recompilation
#DEPS = $(APRON_PREFIX)/include/ap_abstract0.h

#---------------------------------------
# Rules
#---------------------------------------

root:
	@echo
	@echo "Please choose a target from:"
	@echo
	@echo " LSl MSl UCl Sl          : single C library"
	@echo " all                     : all C libraries"
	@echo " ml                      : OCaml library"
	@echo " allml                   : everything"
	@echo " install                 : to install what has been compiled"
	@echo " indent                  : to indent C sources"
	@echo " clean                   : remove objects"
	@echo " distclean               : clean & uninstall"
	@echo " mostyleclean            : remove objects & autogenerated"
	@echo " rebuild                 : rebuild autogenerated "
	@echo

all: LSl MSl UCl Sl
	ln -f -s liblsum$(LSUM_OPT)$(DEBUG).so liblsum.so
	ln -f -s libmset$(MSET_OPT)$(DEBUG).so libmset.so
	ln -f -s libucons$(UCONS_OPT)$(DEBUG).so libucons.so

allml: ml


LSl: liblsum$(LSUM_OPT)$(DEBUG).so

MSl: libmset$(MSET_OPT)$(DEBUG).so

UCl: libucons$(UCONS_OPT)$(DEBUG).so

Sl: libshape$(DEBUG).so
	
    
alltest: hgraphtest shapetest

clean:
	/bin/rm -f *.[ao] *.so *_debug.[ao] hgraphtest shapetest*
	/bin/rm -f *.?.tex *.log *.aux *.bbl *.blg *.toc *.dvi *.ps *.pstex*
	/bin/rm -fr *.cm[ioax] *.cmxa
	/bin/rm -fr shapetop* shaperun* tmp
	/bin/rm -fr *~ \#*\# *.BAK f_*.shp

mostlyclean: clean
	/bin/rm -fr *_caml.c *.mli

install:
	$(INSTALLd) $(INCDIR) $(INCDIR)/shape $(LIBDIR) $(BINDIR)
	$(INSTALL) shape.h $(INCDIR)
	$(INSTALL) $(CCINC) $(INCDIR)/shape
	for i in libshape*.* libshape*_debug.* libshape_caml.* shape.idl; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done
	for i in shapetest?? shapetop?? shaperun??; do \
		if test -f $$i; then $(INSTALL) $$i $(BINDIR); fi; \
	done
	for i in shape.mli shape.cmi shape.cma shape.cmxa shape.a; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done

uninstall:
	/bin/rm -fr $(INCDIR)/shape
	/bin/rm -f $(BINDIR)/shapetest?? $(BINDIR)/shapetop?? $(BINDIR)/shaperun??
	/bin/rm -f $(LIBDIR)/libshape*.* $(LIBDIR)/libshape*_debug.* $(LIBDIR)/libshape_caml.a
	/bin/rm -f $(LIBDIR)/shape.mli $(LIBDIR)/shape.cmi $(LIBDIR)/shape.idl $(LIBDIR)/shape.cma $(LIBDIR)/shape.cmxa $(LIBDIR)/shape.a
	/bin/rm -f Makefile.depend

distclean: uninstall
	/bin/rm -f Makefile.depend

dist: Makefile COPYING README shape_doc.html sedscript_caml sedscript_c $(CCSOURCES) $(CCINC) shape.h shape_test.c shape.idl shape.mli shape.ml shape_caml.c
	(cd ..; tar zcvf shapes.tgz $(^:%=shapes/%))

indent: $(CCSOURCES) $(CCINC)
	for i in $(CCSOURCES) $(CCINC); do \
		echo "* indent $$i"; indent -bl -i2 $$i; \
	done

#-----------------------------------
# C part
#-----------------------------------

DOM_LIB = \
liblsum$(LSUM_OPT)$(DEBUG).so \
libmset$(MSET_OPT)$(DEBUG).so \
libucons$(UCONS_OPT)$(DEBUG).so \
libshape$(DEBUG).so

SHAPE_LIBS = \
-llsum$(LSUM_OPT)$(DEBUG) \
-lmset$(MSET_OPT)$(DEBUG) \
-lucons$(UCONS_OPT)$(DEBUG) \
-lshape$(DEBUG)

APRON_LIBS = \
-lapron$(DEBUG) \
-lboxD \
-loctD \
-lpolkaMPQ$(DEBUG) 

# hgraph_*
#
libhgraph.a: $(subst .c,.o,$(HGRAPH_CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libhgraph_debug.a: $(subst .c,_debug.o,$(HGRAPH_CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libhgraph.so: $(subst .c,.o,$(HGRAPH_CCSOURCES))
	$(SHARED) -o $@ $^

# hgraphtest: libhgraph_debug.a hgraph_test_debug.o
# 	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ hgraph_test_debug.o \
# 	-L. -lhgraph_debug \

hgraphtest: $(DOM_LIB) hgraph_test$(DEBUG).o
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ shape_test$(DEBUG).o \
	-L. $(SHAPE_LIBS) \
	-L$(APRON_PREFIX)/lib $(APRON_LIBS) \
	-L$(MPFR_PREFIX)/lib -lmpfr \
	-L$(GMP_PREFIX)/lib -lgmp \
	-lm

# lsum_*
#
liblsum%.a: $(subst .c,lsum%.o,$(LSUM_CCSOURCES))
		$(AR) rcs $@ $^
		$(RANLIB) $@

liblsum%_debug.a: $(subst .c,lsum%_debug.o,$(LSUM_CCSOURCES))
		$(AR) rcs $@ $^
		$(RANLIB) $@

liblsum%.so: $(subst .c,lsum%.o,$(LSUM_CCSOURCES))
		$(SHARED) -o $@ $^

%lsumrel.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DLSUM_REL -c -o $@ $<

%lsumrel_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -DLSUM_REL -c -o $@ $<

%lsumprd.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%lsumprd_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -c -o $@ $<


# mset_*
#
libmset%.a: $(subst .c,mset%.o,$(MSET_CCSOURCES))
		$(AR) rcs $@ $^
		$(RANLIB) $@

libmset%_debug.a: $(subst .c,mset%_debug.o,$(MSET_CCSOURCES))
		$(AR) rcs $@ $^
		$(RANLIB) $@

libmset%.so: $(subst .c,mset%.o,$(MSET_CCSOURCES))
		$(SHARED) -o $@ $^

%msetrel.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DMSET_REL -c -o $@ $<

%msetrel_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -DMSET_REL -c -o $@ $<

%msetprd.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%msetprd_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -c -o $@ $<


# ucons_*
#
libucons%.a: $(subst .c,ucons%.o,$(UCONS_CCSOURCES))
		$(AR) rcs $@ $^
		$(RANLIB) $@

libucons%_debug.a: $(subst .c,ucons%_debug.o,$(UCONS_CCSOURCES))
		$(AR) rcs $@ $^
		$(RANLIB) $@

libucons%.so: $(subst .c,ucons%.o,$(UCONS_CCSOURCES))
		$(SHARED) -o $@ $^

%uconsdyn.o: %.c $(CCINC) $(DEPS)
		$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<
		
%uconsdyn_debug.o: %.c $(CCINC) $(DEPS)
		$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -c -o $@ $<
		
uconstest: libucons_debug.a ucons_test.o
		$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ ucons_test.o \
		-L. -lucons_debug \
		-L../newpolka -lpolkaMPQ_debug \
		-L../apron -lapron_debug \
		-L$(MPFR_PREFIX)/lib -lmpfr \
		-L$(GMP_PREFIX)/lib -lgmp \
		-lm


# shape_*
#
libshape.a: $(subst .c,.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libshape_debug.a: $(subst .c,_debug.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libshape.so: $(subst .c,.o,$(CCSOURCES))
	$(SHARED) -o $@ $^

libshape_debug.so: $(subst .c,_debug.o,$(CCSOURCES))
	$(SHARED) -o $@ $^

shapetest: $(DOM_LIB) shape_test$(DEBUG).o
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ shape_test$(DEBUG).o \
	-L. $(SHAPE_LIBS) \
	-L$(APRON_PREFIX)/lib $(APRON_LIBS) \
	-L$(MPFR_PREFIX)/lib -lmpfr \
	-L$(GMP_PREFIX)/lib -lgmpxx -lgmp \
	-lm


#---------------------------------------
# IMPLICIT RULES AND DEPENDENCIES
#---------------------------------------

.SUFFIXES: .tex .c .h .a .o .so


%_caml.o: %_caml.c $(CCINC) $(DEPS) lib%.a
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -c -o $@ $<

.PRECIOUS: liblsum%.a libmset%.a libucons%.a libshape%.a libshape%_debug.a libshape%.so


#-----------------------------------
# Caml part
#-----------------------------------

ml: shape.mli shape.cmi shape.cma shape.cmxa libshape_caml.a

shape.cma: shape.cmi shape.cmo libshape_caml.a
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -custom -a -o $@ \
	shape.cmo \
	-ccopt "-L$(APRON_PREFIX)/lib" -cclib "-lshape_caml"

shape.cmxa shape.a: shape.cmi shape.cmx libshape_caml.a
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINC) -a -o $@ \
	shape.cmx \
	-ccopt "-L$(APRON_PREFIX)/lib" -cclib "-lshape_caml"
	$(RANLIB) shape.a

libshape_caml.a: shape_caml$(DEBUG).o 
	$(AR) rcs $@ $^
	$(RANLIB) $@

libshape_caml.so: shape_caml$(DEBUG).o
	$(SHARED) -o $@ $^

mltest: mltest.ml shape.cma
	$(OCAMLC) -I $(APRON_PREFIX)/lib -I . gmp.cma apron.cma shape.cma mltest.ml \
	-cclib -lshape -cclib -lapron

#---------------------------------------
# IDL rules
#---------------------------------------


# generates XXX.ml, XXX.mli, XXX_caml.c from XXX.idl
rebuild: hgraph.idl ushape.idl shape.idl
	mkdir -p tmp
	cp $(APRON_PREFIX)/apron/mlapronidl/*.idl tmp
	cp *.idl tmp/
	for i in hgraph ushape shape; do \
		cd tmp ; $(CAMLIDL) -no-include -nocpp -I . $$i.idl ; cd ../ ; \
		$(SED) -f sedscript_caml tmp/$$i.ml >$$i.ml ; \
		$(SED) -f sedscript_caml tmp/$$i.mli >$$i.mli ; \
		$(SED) -f sedscript_c tmp/$$i_stubs.c >$$i_caml.c ; \
        done

.PRECIOUS: %_caml.c %.ml %.mli %.cmi libshape%_caml.a libshape%_caml.so shape.cmx shape.cmo

#---------------------------------------
# ML generic rules
#---------------------------------------

%.cmi: %.mli  $(DEPS)
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -c $<

%.cmo: %.ml %.cmi  $(DEPS)
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -c $<

%.cmx: %.ml %.cmi  $(DEPS)
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINC) -c $<



#-----------------------------------
# DEPENDENCIES
#-----------------------------------
