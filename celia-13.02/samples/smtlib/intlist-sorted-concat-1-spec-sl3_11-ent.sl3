(set-logic SL3)
(declare-sort Ptr 0)
(declare-sort Node 0)
(declare-fun nilNode () Node)
(declare-fun len (Node) Int)
(declare-fun data (Node Int) Int)
(declare-fun sum (Node) Int)
(declare-fun mset (Node) Int)
(declare-fun sep (Bool Bool) Bool)
(declare-fun ls (Node Node) Bool)
(declare-fun label (Ptr Node) Bool)
(declare-fun Gall (Int Node) Bool)
(declare-fun Gle2 (Int Int Node) Bool)
(declare-fun Gsucc2 (Int Int Node) Bool)
(declare-fun Gfst (Int Node) Bool)
(declare-fun Glst (Int Node) Bool)
(declare-fun Geq2 (Int Node Int Node) Bool)
(declare-fun Gsl2 (Int Node Int Node Int) Bool)
(declare-fun Gsr2 (Int Node Int Node Int) Bool)
(declare-fun x0 () Ptr)
(declare-fun x1 () Ptr)
(declare-fun x2 () Ptr)
(declare-fun x3 () Ptr)
(assert 
	(exists ( (?n1 Node) )
	(and 
		;; graph labeling
		(label x0 nilNode)
		(label x1 ?n1)
		(label x2 nilNode)
		(label x3 nilNode)

		;; graph edges
		(ls ?n1 nilNode)
	;; ucons constraints
		(<= 0 (- (+  (len ?n1)  0 )  (+ 3 0 ) ) )
		(forall ((?y1 Int))
		(=> (Gall ?y1 n1)
		(and 
		(<= 0 (- (+   (data ?n1 ?y1)   0 )  (+  (data ?n1 0)  0 ) ) )
		(<= 0 (- (+  (len ?n1)  0 )  (+  ?y1 2) ) )
		(<= 0 (- (+  (len ?n1)  0 )  (+ 3 0 ) ) )
		)
		) )

	) ;; end and

	) ;; end exists
) ;; end assert
(assert 
(not 
	(exists ( (?n1 Node) )
	(and 
		;; graph labeling
		(label x0 nilNode)
		(label x1 ?n1)
		(label x2 nilNode)
		(label x3 nilNode)

		;; graph edges
		(ls ?n1 nilNode)
	;; ucons constraints
		(<= 0 (- (+  (len ?n1)  0 )  (+ 3 0 ) ) )
		(forall ((?y1 Int))
		(=> (Gall ?y1 n1)
		(and 
		(<= 0 (- (+   (data ?n1 ?y1)   0 )  (+  (data ?n1 0)  0 ) ) )
		(<= 0 (- (+  (len ?n1)  0 )  (+  ?y1 1) ) )
		(<= 0 (- (+  (len ?n1)  0 )  (+ 3 0 ) ) )
		)
		) )
		(forall ((?y1 Int) (?y2 Int))
		(=> (Gle2 ?y1 ?y2 n1)
		(and 
		(<= 0 (- (+  ?y2  0 )  (+  ?y1  0 ) ) )
		(<= 0 (- (+   (data ?n1 ?y2)   0 )  (+   (data ?n1 ?y1)   0 ) ) )
		(<= 0 (- (+  (len ?n1)  0 )  (+  ?y2 1) ) )
		(<= 0 (- (+  (len ?n1)  0 )  (+ 3 0 ) ) )
		)
		) )

	) ;; end and

	) ;; end exists
) ;; end not
) ;; end assert
(check-sat)
